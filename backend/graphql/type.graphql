type User {
    id: ID!
    name: String!
    email: String!
    lang: String
    created_at: String
    updated_at: String
    role: String,
    time_zone: String
}

input OrderByClause{
    column: String
    order: SortOrder
}

enum SortOrder {
    ASC
    DESC
}

type Manager {
    id: ID!

}

type UserPaginator {
    data: [User!]!
    paginatorInfo: PaginatorInfo!
}

type PaginatorInfo {
    "Number of items in the current page."
    count: Int!
    "Index of the current page."
    currentPage: Int!
    "Index of the first item in the current page."
    firstItem: Int
    "Are there more pages after this one?"
    hasMorePages: Boolean!
    "Index of the last item in the current page."
    lastItem: Int
    "Index of the last available page."
    lastPage: Int!
    "Number of items per page."
    perPage: Int!
    "Number of total available items."
    total: Int!
}

"Information about pagination using a simple paginator."
type SimplePaginatorInfo {
    "Number of items in the current page."
    count: Int!
    "Index of the current page."
    currentPage: Int!
    "Index of the first item in the current page."
    firstItem: Int
    "Index of the last item in the current page."
    lastItem: Int
    "Number of items per page."
    perPage: Int!
}

type AuthToken {
    user: User
    token: String
}

type Message {
    success: Boolean!
    message: String!
}

type MessageUser {
    success: Boolean!
    message: String!
    user: User
}

type Address {
    id: ID!
    address_line_1: String!,
    address_line_2: String,
    country: String @method(name: "getCountryName"),
    state: String @method(name: "getStateName"),
    city: String @method(name: "getCityName"),
    postal: String,
    postal_address: Boolean,
    primary_address: Boolean,
    billing_address: Boolean
}
