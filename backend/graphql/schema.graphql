"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32` "
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    me: User @auth @guard(with: ["sanctum"])
#    (first: Int!, page: Int)
    users(search: String @search, sort: [OrderByClause] @orderBy):[User!]! @paginate(type: SIMPLE  model: "App\\Models\\User") @guard(with: ["sanctum"]) #@field(resolver: "UsersQuery@resolve")
    user(id: ID @eq): User @find @guard(with: ["sanctum"])
    profile: User! @guard(with: ["sanctum"])
    verify(expires: String!, hash: String!, id: Int!, signature: String!): AuthToken @field(resolver: "VerifyQuery@verify")
#PAGINATOR
#    managers: [Managers!]! @paginate(type: SIMPLE) @guard(with: ["sanctum"])
}

type Mutation {
    createUser(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "RegisterMutator@resolve")

    login(
        email: String!,
        password: String!
    ): AuthToken @field(resolver: "AuthMutator@resolve")

    logout: Message @field(resolver: "LogoutMutator@resolve") @guard(with: ["sanctum"])

    edite(lang: String, time_zone: String): User! @guard(with: ["sanctum"]) @field(resolver: "EditMutator@resolve")

#    createUserManager(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "CreateManagerMutator@resolve") @guard(with: ["sanctum"])
    createUserFacility(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "CreateFacilityMutator@resolve") @guard(with: ["sanctum"])
    createUserProvider(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "CreateProviderMutator@resolve") @guard(with: ["sanctum"])
    createUserCompany(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "CreateCompanyMutator@resolve") @guard(with: ["sanctum"])
    createUserEmployee(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "CreateEmployeeMutator@resolve") @guard(with: ["sanctum"])
}

type User {
    id: ID!
    name: String!
    email: String!
    lang: String
    created_at: String
    updated_at: String
    role: String
}

input OrderByClause{
    column: String
    order: SortOrder
}

enum SortOrder {
    ASC
    DESC
}

type Manager {
    id: ID!

}



type UserPaginator {
    data: [User!]!
    paginatorInfo: PaginatorInfo!
}

type PaginatorInfo {
    "Number of items in the current page."
    count: Int!
    "Index of the current page."
    currentPage: Int!
    "Index of the first item in the current page."
    firstItem: Int
    "Are there more pages after this one?"
    hasMorePages: Boolean!
    "Index of the last item in the current page."
    lastItem: Int
    "Index of the last available page."
    lastPage: Int!
    "Number of items per page."
    perPage: Int!
    "Number of total available items."
    total: Int!
}

"Information about pagination using a simple paginator."
type SimplePaginatorInfo {
    "Number of items in the current page."
    count: Int!
    "Index of the current page."
    currentPage: Int!
    "Index of the first item in the current page."
    firstItem: Int
    "Index of the last item in the current page."
    lastItem: Int
    "Number of items per page."
    perPage: Int!
}

type AuthToken {
    user: User
    token: String
}

type Message {
    success: Boolean!
    message: String!
}
