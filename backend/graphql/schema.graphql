"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32` "
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    me: User @auth @guard(with: ["sanctum"])
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find @guard(with: ["sanctum"])
    profile: User! @guard(with: ["sanctum"])
    verify(expires: String!, hash: String!, id: Int!, signature: String!): AuthToken @field(resolver: "VerifyQuery@verify")
}

type Mutation {
    createUser(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "RegisterMutator@resolve")

    login(
        email: String!,
        password: String!
    ): AuthToken @field(resolver: "AuthMutator@resolve")

    logout: Message @field(resolver: "LogoutMutator@resolve") @guard(with: ["sanctum"])

    edite(lang: String, time_zone: String): User! @guard(with: ["sanctum"]) @field(resolver: "EditeMutator@resolve")

    createUserManager(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "CreateManagerMutator@resolve") @guard(with: ["sanctum"])
    createUserFacility(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "CreateFacilityMutator@resolve") @guard(with: ["sanctum"])
    createUserProvider(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "CreateProviderMutator@resolve") @guard(with: ["sanctum"])
    createUserCompany(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "CreateCompanyMutator@resolve") @guard(with: ["sanctum"])
    createUserEmployee(name: String!, email: String!, password: String!, c_password: String!): Message @field(resolver: "CreateEmployeeMutator@resolve") @guard(with: ["sanctum"])
}

type User {
    id: ID!
    name: String!
    email: String!
    lang: String
    time_zone: String
}

type AuthToken {
    user: User
    token: String
}

type Message {
    success: Boolean!
    message: String!
}
